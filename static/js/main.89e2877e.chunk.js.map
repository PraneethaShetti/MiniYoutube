{"version":3,"sources":["components/searchresultthumb.jsx","components/mainframe.jsx","App.js","serviceWorker.js","index.js"],"names":["Searchresultthumb","react_default","a","createElement","onClick","this","props","onClickVideo","className","Row","Col","sm","src","youtubeData","thumbnail","alt","style","border","title","Component","Mainframe","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","gapiReady","searchedText","currentResults","currentVideo","currentVideoId","showPlayer","loadYoutubeApi","getDataFromYoutube","_this2","script","document","onload","gapi","load","client","setApiKey","setState","body","appendChild","searchText","request","youtube","search","list","part","type","order","q","maxResults","self","execute","response","result","items","map","value","videoId","id","snippet","thumbnails","medium","url","description","length","evt","target","video","embedCode","window","scrollTo","_this3","Grid","xs","md","lg","placeholder","onChange","onSearchText","bind","display","width","height","frameBorder","allow","allowFullScreen","element","index","searchresultthumb","key","clickListner","App","mainframe","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.89e2877e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\n\r\nclass Searchresultthumb extends Component {\r\n    render() {\r\n        return (\r\n            <div onClick={this.props.onClickVideo} className=\"resultThumb\">\r\n                <Row >\r\n                    <Col sm={12}>\r\n                        <img src={this.props.youtubeData.thumbnail} alt=\"\" style={{ border: \"2px dotted pink\" }} />\r\n                    </Col>\r\n                    <Col sm={12}>\r\n                        <h3>{this.props.youtubeData.title}</h3>\r\n                        {/* <p className=\"resultDescription\" style={{ border: \"2px dotted green\" }}>{this.props.youtubeData.description}</p> */}\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Searchresultthumb;","/* global gapi */\r\nimport React, { Component } from 'react';\r\nimport { Col, Row, Grid } from 'react-bootstrap';\r\nimport Searchresultthumb from './searchresultthumb';\r\nconst API_KEY = 'AIzaSyBcbdgVrYczp0g1gAdH8TKVx72eljduNsw';\r\n\r\n\r\nclass Mainframe extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            gapiReady: false,\r\n            searchedText: '',\r\n            currentResults: [],\r\n            currentVideo: '',\r\n            currentVideoId: '',\r\n            showPlayer: 'none'\r\n        }\r\n        this.loadYoutubeApi = this.loadYoutubeApi;\r\n        this.getDataFromYoutube = this.getDataFromYoutube;\r\n    }\r\n    loadYoutubeApi() {\r\n        const script = document.createElement(\"script\");\r\n        script.src = \"https://apis.google.com/js/client.js\";\r\n\r\n        script.onload = () => {\r\n            gapi.load('client', () => {\r\n                gapi.client.setApiKey(API_KEY);\r\n                gapi.client.load('youtube', 'v3', () => {\r\n                    this.setState({ gapiReady: true });\r\n                });\r\n            });\r\n        };\r\n\r\n        document.body.appendChild(script);\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.loadYoutubeApi();\r\n    }\r\n\r\n    getDataFromYoutube() {\r\n        var searchText = this.state.searchedText;\r\n        var request = gapi.client.youtube.search.list({\r\n            part: \"snippet\",\r\n            type: \"video\",\r\n            order: \"ViewCount\",\r\n            //q: encodeURIComponent(searchText.replace(/%20/g, \"+\")),\r\n            q: searchText,\r\n            maxResults: 10,\r\n        });\r\n        // execute the request\r\n        var self = this;\r\n        request.execute(function (response) {\r\n            var result = response.items.map((value) => {\r\n                return {\r\n                    videoId: value.id.videoId,\r\n                    thumbnail: value.snippet.thumbnails.medium.url,\r\n                    description: value.snippet.description,\r\n                    title: value.snippet.title\r\n                }\r\n            })\r\n            if (result.length > 0) {\r\n                self.setState({ currentResults: result, showPlayer: 'none' })\r\n            } else {\r\n                self.setState({ currentResults: [] })\r\n            }\r\n        });\r\n    }\r\n\r\n    onSearchText(evt) {\r\n        this.setState({ searchedText: evt.target.value })\r\n    }\r\n\r\n    clickListner(video) {\r\n        var embedCode = \"https://www.youtube.com/embed/\" + video.videoId\r\n        this.setState({ showPlayer: 'block', currentVideoId: embedCode, currentVideo: video })\r\n        window.scrollTo(0, 0)\r\n    }\r\n\r\n    render() {\r\n        if (this.state.gapiReady) {\r\n            return (\r\n                <div>\r\n                    <Grid>\r\n                        <Row className=\"show-grid\">\r\n                            <Col xs={12} sm={12} md={8} lg={8}>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"searchBtn\">\r\n                                            <input type=\"text\" placeholder=\"Search Youtube Video\" value={this.state.searchedText} onChange={this.onSearchText.bind(this)} />\r\n                                            <button className=\"btn btn-primary searchbtn\" onClick={this.getDataFromYoutube.bind(this)}><i className=\"fa fa-search\"></i></button>\r\n                                        </div>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <div className=\"selectedVideo\" style={{ border: \"2px solid yellow\", display: this.state.showPlayer }}>\r\n                                            <iframe width=\"100%\" height=\"315\" src={this.state.currentVideoId} title=\"playVideo\" frameBorder=\"0\" allow=\"autoplay; encrypted-media\" allowFullScreen></iframe>\r\n                                            <h2>{this.state.currentVideo.title}</h2>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Col>\r\n                            <Col xs={12} sm={12} md={4} lg={4}>\r\n                                <div className=\"searchResult\">\r\n                                    {\r\n                                        this.state.currentResults.map((element, index) => {\r\n                                            return <Searchresultthumb key={index} onClickVideo={this.clickListner.bind(this, element)} youtubeData={element} />\r\n                                        })\r\n                                    }\r\n\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Grid>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <h1>Loading...Please give us a moment.!</h1>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Mainframe;","\nimport React, { Component } from 'react';\nimport Mainframe from './components/mainframe';\nimport './App.css';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Mainframe />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}